{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML_lab1","provenance":[{"file_id":"10nyYL2Gys26UnbpPhivQJGKUym_ETQEd","timestamp":1631759224743}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BsNwjQDRfmLY"},"source":["# Задание 1"]},{"cell_type":"markdown","metadata":{"id":"wu6r1-s7fmLe"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"zxRIdPO9gYyX"},"source":["Напишите программу, которая будет решать систему линейных уравнений вида:\n","\n","\\begin{matrix} a_{11}x+a_{12}y=b_{1}&(1) \\\\ a_{21}x+a_{22}y=b_{2} &(2) \\end{matrix}\n","​\t\n","На вход программа должна принимать 2 строки.\n","\n","Каждая строка содержит 3 действительных числа через пробел: коэффициенты a и b.\n","\n","На выходе программа должна выдавать значения x и y в одну строку через пробел.\n"," \n","\n","Примечание 1. Для разделения строки на отдельные элементы используйте функцию split()\n","\n","Примечание 2. В качестве разделителя между целой и дробной частью используйте точку, например 0.2"]},{"cell_type":"code","metadata":{"id":"6sxlcLbVlrjl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632938555043,"user_tz":-180,"elapsed":6052,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"73ec2273-407f-47ad-ac81-dbe1a4d18d6d"},"source":["import numpy as np\n","\n","\n","def linan(equation1, equation2):\n","  coeff1 = [int(x) for x in equation1.split(\" \")]\n","  coeff2 = [int(x) for x in equation2.split(\" \")]\n","  \n","  matA = np.array([[coeff1[0], coeff1[1]], [coeff2[0], coeff2[1]]])\n","  matB = np.array([coeff1[2], coeff2[2]])\n","\n","  return np.linalg.solve(matA, matB)\n","\n","\n","s1 = input()\n","s2 = input()\n","print(*linan(s1, s2))"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3\n","4 5 6\n","-1.0 2.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"wLoVDMQnfmOv"},"source":["# Задание 2"]},{"cell_type":"markdown","metadata":{"id":"6bmt_YF3fmOw"},"source":["Напишите функцию `decorate_matrix`, которая получает на вход одно целое число больше единицы. Функция должна возвращать матрицу n на n, у которой на границах стоят единицы, а на всех остальных позициях(если остались позиции не на границах) стоят нули.\n","\n","Нужно сделать без использования  циклов.\n","\n","```\n","# ожидаемый резальтат для аргумента 5\n","array([[1., 1., 1., 1., 1.],\n","[1., 0., 0., 0., 1.],\n","[1., 0., 0., 0., 1.],\n","[1., 0., 0., 0., 1.],\n","[1., 1., 1., 1., 1.]])\n","```\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b9i4ChIJdq_0","executionInfo":{"status":"ok","timestamp":1632829934341,"user_tz":-180,"elapsed":180,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"15bd2943-eccc-4cd1-f596-cee90fd4e067"},"source":["def decorate_matrix(size):\n","  result = np.zeros((size, size))\n","  result[0, :] = 1\n","  result[:, size - 1] = 1\n","  result[size - 1, :] = 1\n","  result[:, 0] = 1\n","  \n","  return result\n","\n","\n","decorate_matrix(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1., 1., 1.],\n","       [1., 0., 0., 0., 1.],\n","       [1., 0., 0., 0., 1.],\n","       [1., 0., 0., 0., 1.],\n","       [1., 1., 1., 1., 1.]])"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"75sxny1zSCbl"},"source":["# Задание 3"]},{"cell_type":"markdown","metadata":{"id":"2Xq1tBBAS5UJ"},"source":["1) реализуйте 2 функции:\n","\n","$f(x) = (x+a)^2 - b$ \n","\n","$g(x) = |f(x)|$\n","\n","2) Найдите аргументы, при которых достигается минимум функций $f(x)$ и $g(x)$\n","\n","Пример. \n","Входные значение: $a=3$ и $b=4$\n","\n","Выходные значения:\n","\n","`-3.0 -1.0`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eAG2gU_1eClh","executionInfo":{"status":"ok","timestamp":1632942119388,"user_tz":-180,"elapsed":225,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"3a7584ee-ecfe-428a-cd57-9a082e8cd4d9"},"source":["from scipy.optimize import minimize\n","\n","\n","def f(x, a, b):\n","  return (x + a)**2 - b\n","\n","\n","def g(x, a, b):\n","  return abs(f(x, a, b))\n","\n","\n","def find_min_arg_f(a, b):\n","  return minimize(f, 0, (a, b)).x\n","\n","\n","def find_min_arg_g(a, b):\n","  return [minimize(g, 0, (a, b)).x, minimize(g, -6, (a, b)).x]\n","\n","\n","min_arg_f = find_min_arg_f(3, 4)\n","min_arg_g = find_min_arg_g(3, 4)\n","\n","print(\"%.1f\" % min_arg_f)\n","print(\"%.1f\" % min_arg_g[0], \"%.1f\" % min_arg_g[1])"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["-3.0\n","-1.0 -5.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"efml9GzISC9Q"},"source":["# Задание 4"]},{"cell_type":"markdown","metadata":{"id":"SDZvKcsTVbAW"},"source":["Постройте графики для функций из предыдущего задания и отметьте другим цветом на графиках точки найденных минимумов."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"-2pcVFWoeVWk","executionInfo":{"status":"ok","timestamp":1632942142626,"user_tz":-180,"elapsed":276,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"53e7fcf5-dd0d-4d6e-fa16-eab935522c89"},"source":["import matplotlib.pyplot as plt\n","\n","\n","fig, ax = plt.subplots()\n","x = np.linspace(-10, 5, 100)\n","\n","ax.scatter(min_arg_f, f(min_arg_f, 3, 4), color=\"green\", label=\"f(x) minimum\")\n","ax.scatter(min_arg_g[0], g(min_arg_g[0], 3, 4), color=\"red\", label=\"g(x) minimum\")\n","ax.scatter(min_arg_g[1], g(min_arg_g[1], 3, 4), color=\"red\")\n","plt.legend(loc=\"upper left\")\n","plt.plot(x, f(x, 3, 4))\n","plt.plot(x, g(x, 3, 4))\n","\n","plt.show()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mrby3EfiSDKJ"},"source":["# Задание 5"]},{"cell_type":"markdown","metadata":{"id":"J6AZ8785VkQd"},"source":["1000 человек бросают монетку. Каждый бросил 10 раз подряд.\n","\n"," 1. Какова вероятность того, что хотя бы у одного человека монетка выпала 10 раз подряд той же самой стороной (орлом или решкой)? \n"," 2. Какова вероятность того, что хотя бы у одного человека монетка выпала 8 раз подряд той же самой стороной (орлом или решкой)? \n"," 3. Какова вероятность того, что ровно у троих человек из 1000 монетка выпала 10 раз подряд той же самой стороной (орлом или решкой)?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IxdCO5xMejV2","executionInfo":{"status":"ok","timestamp":1632858368091,"user_tz":-180,"elapsed":219,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"dab163ca-b2e6-4a60-dc77-f91a22a0a9e4"},"source":["import math\n","\n","\n","n = 1000\n","c = 10\n","\n","# №1\n","print(1 - (1 - 2 / (2**c))**n)\n","\n","# №2\n","situations = 5  # Монетка выпала 8 раз подряд одной стороной\n","print(1 - (1 - (situations * 2) / (2**c))**n)\n","\n","# №3\n","# Воспользуемся формулой Бернулли:\n","amount = 3  # Количество людей из условия\n","C = math.factorial(n) / (math.factorial(amount) * math.factorial(n - amount))\n","p_k = (2 / (2**c))**amount\n","q_k = (1 - 2 / (2**c))**(n - amount)\n","print(C * p_k * q_k)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.858440454732242\n","0.9999452986105908\n","0.1762873858121736\n"]}]}]}