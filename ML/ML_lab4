{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML_lab4","provenance":[{"file_id":"1eUpBIYzwvrMx-cgqAn-mNMPza9U8_gZW","timestamp":1636559615386},{"file_id":"1IAJXJC3FAdrLQnl2yVoEvX8jg27CzLm6","timestamp":1603282414216}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"hGClrhQA9SAk"},"source":["# Деревья решений"]},{"cell_type":"markdown","metadata":{"id":"veekMy8WRjBi"},"source":["## Построение дерева"]},{"cell_type":"markdown","metadata":{"id":"SYkVwAFiUHXj"},"source":["Опишем жадный алгоритм построения бинарного дерева решений:\n","1. Начинаем со всей обучающей выборки $X$, которую помещаем в корень $R_1$. \n","2. Задаём функционал качества $Q(X, j, t)$ и критерий остановки. \n","3. Запускаем построение из корня: $SplitNode(1, R_1)$\n","\n","Функция $SplitNode(m, R_m)$\n","1. Если выполнен критерий остановки, то выход.\n","2. Находим наилучший с точки зрения $Q$ предикат: $j, t$: $[x_j<t]$\n","3. Помещаем предикат в вкршину и получаем с его помощью разбиение $X$ на две части: $R_{left} = \\lbrace x|x_j<t \\rbrace$ и $R_{right} = \\lbrace x|x_j \\geqslant t \\rbrace$\n","4. Поместим $R_{left}$ и $R_{right}$ соответсвенно в левое и правое поддерево.\n","5. Рекурсивно повторяем $SplitNode(left, R_{left})$ и $SplitNode(right, R_{right})$.\n","\n","В конце поставим в соответствие каждому листу ответ. Для задачи классификации - это самый частый среди объектов класс или вектор с долями классов (можно интерпретировать как вероятности):\n","$$ c_v = \\arg \\max_{k\\in Y} \\sum_{(x_i,y_i) \\in R_v} [y_i=k]  $$"]},{"cell_type":"markdown","metadata":{"id":"9P6FsdBog4Ai"},"source":["## Функционал качества для деревьев решений\n"]},{"cell_type":"markdown","metadata":{"id":"9VAKO0aykGBD"},"source":["Энтропия Шеннона для системы с N возможными состояниями определяется по формуле:\n","$$H = - \\sum_{i=0}^{N} p_i\\log_2p_i $$"]},{"cell_type":"markdown","metadata":{"id":"5582B-1Fn2bw"},"source":["где $p_i$ – вероятности нахождения системы в $i$-ом состоянии. \n","\n","Это очень важное понятие теории информации, которое позволяет оценить количество информации (степень хаоса в системе). Чем выше энтропия, тем менее упорядочена система и наоборот. С помощью энтропии мы формализуем функционал качества для разделение выборки (для задачи классификации)."]},{"cell_type":"code","metadata":{"id":"PbcMUd7bvk05","executionInfo":{"status":"ok","timestamp":1637775631365,"user_tz":-180,"elapsed":235,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["import numpy as np\n","import pandas as pd\n","\n","import matplotlib.pyplot as plt\n","\n","import random\n","from pprint import pprint"],"execution_count":48,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4AdLxP9CowTm"},"source":["Код для расчёта энтропии:"]},{"cell_type":"code","metadata":{"id":"2mT8Jq8Av2sM","executionInfo":{"status":"ok","timestamp":1637775632677,"user_tz":-180,"elapsed":243,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["def entropy(y):\n","    \n","    _, counts = np.unique(y, return_counts=True)\n","\n","    probabilities = counts / counts.sum()\n","    entropy = sum(probabilities * -np.log2(probabilities))\n","     \n","    return entropy"],"execution_count":49,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xk9etb2vo7fK"},"source":["Здесь $y$ - это массив значений целевой переменной"]},{"cell_type":"markdown","metadata":{"id":"07TCw0USzLus"},"source":["Энтропия – по сути степень хаоса (или неопределенности) в системе. Уменьшение энтропии называют приростом информации (information gain, IG).\n","\n","Обочначим $R_v$ - объекты, которые нужно разделить в помощью предиката в вершине $v$. Запишем формулу для расчёта информационного прироста:\n","$$ Q = IG = H(R_v) - (H(R_{left})+H(R_{right}))$$\n","\n","На каждом шаге нам нужно максимизировать этот функционал качества. Как это делать? Например, так можно перебрать $t$ для выбранного $j$."]},{"cell_type":"markdown","metadata":{"id":"trEWHDoXg_p9"},"source":["Предыдущая версия формулы прироста информации слишком упрощена. В работе необходимо использовать более устойчивую формулу, которая учитывает не только энтропию подмножеств, но и их размер. \n","\n","$$ Q = IG = H(R_v) - \\Big (\\frac{|R_{left}|} {|R_{v}|} H(R_{left})+ \\frac{|R_{right}|} {|R_{v}|} H(R_{right})\\Big)$$\n","\n","где, $|R_{v}|$, $|R_{left}|$ и $|R_{right}|$ - количество элементов в соответствующих множествах."]},{"cell_type":"markdown","metadata":{"id":"9xmN6V_N1xBr"},"source":["\n","### Задание 4.1"]},{"cell_type":"markdown","metadata":{"id":"nWFHZScF2CBF"},"source":["Реализуйте алгоритм построения дерева. Должны быть отдельные функции (методы) для расчёта энтропии (уже есть), для разделения дерева (используйте `pandas`), для подсчёта функционала качества $IG$, для выбора наилучшего разделения (с учетом признакоd и порогов), для проверки критерия остановки.\n","\n","Для набора данных `iris` реализуйте алгоритм и минимум три из разными критерия остановки из перечисленных ниже:\n","* максимальной глубины дерева = 5\n","* минимального числа объектов в листе = 5\n","* максимальное количество листьев в дереве = 5\n","* purity (остановка, если все объекты в листе относятся к одному классу)\n","\n","Реализуйте функцию `predict` (на вход функции подаётся датафрейм с объектами)\n","\n","Оцените точность каждой модели с помощью метрики точность (`from sklearn.metrics import accuracy_score` или реализовать свою)."]},{"cell_type":"code","metadata":{"id":"DrDN5vHqlOly","executionInfo":{"status":"ok","timestamp":1637775635884,"user_tz":-180,"elapsed":241,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["from sklearn.datasets import load_iris\n","\n","iris = load_iris()\n","X = iris.data[:, :2]\n","y = iris.target"],"execution_count":50,"outputs":[]},{"cell_type":"code","metadata":{"id":"2tTWy-FKlZ9d","executionInfo":{"status":"ok","timestamp":1637775636713,"user_tz":-180,"elapsed":2,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["tmp_features_sums = 0"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"bGucduk4lxtM","executionInfo":{"status":"ok","timestamp":1637775637673,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"ee313b4e-efe5-40f7-8cb9-1e7ffdba6ee1"},"source":["data = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n","                     columns= iris['feature_names'] + ['target'])\n","\n","data2 = data.sample(frac=1).reset_index(drop=True)\n","\n","X_train = data2.drop(['target'], axis='columns').iloc[:100]\n","y_train = data2['target'].iloc[:100]\n","X_test = data2.drop(['target'], axis='columns').iloc[100:150]\n","y_test = data2['target'].iloc[100:150]\n","X = data[['sepal length (cm)', 'sepal width (cm)']]\n","y = data['target']\n","\n","data"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 5 columns</p>\n","</div>"],"text/plain":["     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","0                  5.1               3.5  ...               0.2     0.0\n","1                  4.9               3.0  ...               0.2     0.0\n","2                  4.7               3.2  ...               0.2     0.0\n","3                  4.6               3.1  ...               0.2     0.0\n","4                  5.0               3.6  ...               0.2     0.0\n","..                 ...               ...  ...               ...     ...\n","145                6.7               3.0  ...               2.3     2.0\n","146                6.3               2.5  ...               1.9     2.0\n","147                6.5               3.0  ...               2.0     2.0\n","148                6.2               3.4  ...               2.3     2.0\n","149                5.9               3.0  ...               1.8     2.0\n","\n","[150 rows x 5 columns]"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"RexN-IxVwlhU","executionInfo":{"status":"ok","timestamp":1637779992824,"user_tz":-180,"elapsed":255,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["def frange(x, y, jump):\n","    while x < y:\n","        yield x\n","        x += jump\n","\n","\n","class Node():\n","  def __init__(self, feature, split_value, is_stopped=False, result_value=None):\n","    self.left_child = None\n","    self.right_child = None\n","    self.feature = feature\n","    self.split_value = split_value\n","    self.is_stopped = is_stopped\n","    self.result_value = result_value\n","    \n","\n","class DecisionTree():\n","  def __init__(self, is_need_calculate_importance=True, split_indexes=-1):\n","    self.first_node = None\n","    self.depth_limit = -1\n","    self.objects_in_node_minimum_count = -1\n","    self.leaf_limit = -1\n","    self.purity = True\n","    self.classes = None\n","    self.need_calculate_importance = is_need_calculate_importance\n","    self.split_indexes = split_indexes\n","\n","  def _entropy(self, y):  \n","    _, counts = np.unique(y, return_counts=True)\n","    probabilities = counts / counts.sum()\n","    entropy = sum(probabilities * -np.log2(probabilities)) \n","    return entropy\n","\n","  def _calculate_metric(self, left_elements, right_elements):\n","    Q = self._entropy(np.hstack((left_elements.values, right_elements.values))) - 1 / (left_elements.shape[0] + \n","                                                        right_elements.shape[0]) * (left_elements.shape[0] * self._entropy(left_elements) + \n","                                                                                  right_elements.shape[0] * self._entropy(right_elements))\n","    return Q\n","\n","\n","  def _find_optimal_split_value(self, train_data, train_targets):\n","    max_increasing_information = 0\n","    current_feature = None\n","    current_split_value = 0\n","    if self.split_indexes == -1:\n","      features = train_data.columns\n","    else:\n","      indexes = np.random.randint(0, len(train_data.columns), self.split_indexes)\n","      features = train_data.columns[indexes]\n","    for feature in features:\n","      for split_value in frange(train_data[feature].min(), train_data[feature].max(), \n","                                (train_data[feature].max() - train_data[feature].min()) / np.sqrt(train_data.shape[0])):\n","        current_increase_info = self._calculate_metric(train_targets[train_data[feature] < split_value], train_targets[train_data[feature] >= split_value])\n","        if current_increase_info > max_increasing_information:\n","          max_increasing_information = current_increase_info\n","          current_split_value = split_value\n","          current_feature = feature\n","    if current_feature != None and self.need_calculate_importance:\n","      tmp_features_sums[current_feature] += self._calculate_metric(train_targets[train_data[current_feature] < current_split_value], train_targets[train_data[current_feature] >= current_split_value])\n","    return [current_feature, current_split_value]\n","\n","  def _create_leaf(self, targets):\n","    classes, counts = np.unique(targets, return_counts=True)\n","    probabilities = np.zeros(len(self.classes))\n","    for i in range(len(classes)):\n","      probabilities[int(classes[i])] = counts[i] / len(targets) \n","    leaf = Node(None, None, True, probabilities)\n","    return leaf\n","\n","  def _step(self, train_data, train_targets, depth=0):\n","    if self.depth_limit != -1 and depth == self.depth_limit:\n","      node2 = self._create_leaf(train_targets)\n","    else:\n","      feature, split_value = self._find_optimal_split_value(train_data, train_targets)\n","      node2 = Node(feature, split_value)\n","      if feature != None:\n","        if self.objects_in_node_minimum_count != -1 and (len(train_targets[train_data[feature] < split_value]) < self.objects_in_node_minimum_count or len(train_targets[train_data[feature] >= split_value]) < self.objects_in_node_minimum_count):\n","          node2 = self._create_leaf(train_targets)\n","        else:\n","          left_data, left_targets = train_data[train_data[feature] < split_value], train_targets[train_data[feature] < split_value]\n","          node2.left_child = self._step(left_data, left_targets, depth+1)\n","          right_data, right_targets = train_data[train_data[feature] >= split_value], train_targets[train_data[feature] >= split_value]\n","          node2.right_child = self._step(right_data, right_targets, depth+1)\n","      else:\n","        node2 = self._create_leaf(train_targets)\n","\n","    return node2\n","\n","  def fit(self, train_data, train_targets, depth_limit=-1, objects_in_node_minimum_count=-1, leaf_limit=-1, purity=True):\n","    self.classes=np.unique(train_targets)\n","    self.depth_limit = depth_limit\n","    self.objects_in_node_minimum_count = objects_in_node_minimum_count\n","    self.leaf_limit = leaf_limit\n","    self.purity = purity\n","    self.first_node = self._step(train_data, train_targets)\n","    return self\n","\n","  def predict(self, test_data):\n","    node = self.first_node\n","    results = []\n","    for i in range(len(test_data)):\n","      test_example = test_data.iloc[i]\n","      curr_node = node\n","      while not curr_node.is_stopped:\n","        if test_example[curr_node.feature] < curr_node.split_value:\n","          curr_node = curr_node.left_child\n","        else:\n","          curr_node = curr_node.right_child\n","      results.append(curr_node.result_value)\n","    return results"],"execution_count":97,"outputs":[]},{"cell_type":"code","metadata":{"id":"UeOfr8Icwple","executionInfo":{"status":"ok","timestamp":1637780024463,"user_tz":-180,"elapsed":27398,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["dt = DecisionTree().fit(X_train, y_train, depth_limit=10)"],"execution_count":98,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a2TgzGv1xRvi","executionInfo":{"status":"ok","timestamp":1637780029576,"user_tz":-180,"elapsed":2008,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"a9ccde2a-06f1-4d7e-aa8c-74c606d2ce50"},"source":["from sklearn.metrics import accuracy_score\n","\n","print(accuracy_score(np.argmax(dt.predict(X_train), axis=1), y_train))\n","print(accuracy_score(np.argmax(dt.predict(X_test), axis=1), y_test))"],"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8902857142857142\n","0.8396666666666667\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MP3-mNmPxfWf","executionInfo":{"status":"ok","timestamp":1637780101451,"user_tz":-180,"elapsed":69593,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"29cf1877-9a61-46ac-91a5-e213779a7985"},"source":["dt = DecisionTree().fit(X_train, y_train, objects_in_node_minimum_count=1)\n","\n","print(accuracy_score(np.argmax(dt.predict(X_train), axis=1), y_train))\n","print(accuracy_score(np.argmax(dt.predict(X_test), axis=1), y_test))"],"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n","0.791\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qv15ZTWqxxlR","executionInfo":{"status":"ok","timestamp":1637780117849,"user_tz":-180,"elapsed":15528,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"e74f6dd7-cd91-4e70-a404-c39d14433100"},"source":["dt = DecisionTree(split_indexes=2).fit(X_train, y_train, objects_in_node_minimum_count=1)\n","\n","print(accuracy_score(np.argmax(dt.predict(X_train), axis=1), y_train))\n","print(accuracy_score(np.argmax(dt.predict(X_test), axis=1), y_test))"],"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9061428571428571\n","0.82\n"]}]},{"cell_type":"markdown","metadata":{"id":"BkyCjLcy_CTM"},"source":["##  Случайный лес"]},{"cell_type":"markdown","metadata":{"id":"7fKZe1FyRgCa"},"source":["Опишем алгоритм случайный лес (*random forest*) и попутно разберём основные идеи:\n","\n","1. Зададим $N$ - число деревьев в лесу.\n","2. Для каждого $n$ из $N$ сгенерируем свою выборку $X_n$. Пусть $m$ - это количество объектов в $X$. При генерации каждой $X_n$ мы будем брать объекты $m$ раз с возвращением. То есть один и тот же объект может попасть в выборку несколько раз, а какие-то объекты не попадут. (Этот способ назвается бутстрап).\n","3. По каждой $X_n$ построим решающее дерево $b_n$. Обычно стараются делать глубокие деревья. В качестве критериев остановки можно использовать `max_depth` или `min_samples_leaf` (например, пока в каждом листе не окажется по одному объекту). При каждом разбиении сначала выбирается $k$ (эвристика $k = \\sqrt d$, где $d$ - это число признаков объектов из выборки $X$) случайных признаков из исходных, и оптимальное разделение выборки ищется только среди них. Обратите внимание, что мы не выбрасываем оставшиеся признаки!\n","4. Итоговый алгоритм будет представлять собой результат голосования (для классификации) и среднее арифметическое (для регрессии). Модификация алгоритма предполагает учёт весов каждого отдельного слабого алгоритма в ансамбле, но в этом особо нет смысла.\n"]},{"cell_type":"code","metadata":{"id":"lzYmvXzzyTLg","executionInfo":{"status":"ok","timestamp":1637775695564,"user_tz":-180,"elapsed":219,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["from tqdm import tqdm\n","import math\n","\n","class RandomForest:\n","  def __init__(self):\n","    self.trees_count = -1\n","    self.bagging_feature_count = -1\n","    self.feature_names = None\n","    self.trees = []\n","\n","  def _bootstrap_indexes(self, examples_count):\n","    samples = []\n","    for i in range(self.trees_count):\n","      rows = np.random.randint(0, examples_count, (examples_count // self.trees_count))\n","      samples.append(rows)\n","    return samples\n","\n","  def _random_subspace_method(self):\n","    feature_samples = []\n","    for i in range(self.trees_count):\n","      columns = self.feature_names[np.random.randint(0, len(self.feature_names), self.bagging_feature_count)]\n","      feature_samples.append(columns)\n","    return feature_samples\n","\n","  def fit(self, train_data, \n","          train_targets, \n","          trees_count, \n","          bagging_feature_count=-1,\n","          depth_limit=-1,\n","          objects_in_node_minimum_count=-1, use_subspaces=True):\n","    self.trees_count = trees_count\n","    if bagging_feature_count != -1:\n","      self.bagging_feature_count = bagging_feature_count\n","    else:\n","      self.bagging_feature_count = math.ceil(np.sqrt(len(train_data.columns)))\n","    self.feature_names = train_data.columns\n","    bootstrap_indexes = self._bootstrap_indexes(len(train_data))\n","    subspaces = self._random_subspace_method()\n","    for i in tqdm(range(self.trees_count)):\n","      if use_subspaces:\n","        self.trees.append([DecisionTree(split_indexes=bagging_feature_count).fit(\n","            train_data.iloc[np.unique(bootstrap_indexes[i])], \n","            train_targets.iloc[np.unique(bootstrap_indexes[i])], \n","            depth_limit=depth_limit, \n","            objects_in_node_minimum_count=objects_in_node_minimum_count), None])   \n","      else:\n","        self.trees.append([DecisionTree().fit(\n","            train_data.iloc[np.unique(bootstrap_indexes[i])], \n","            train_targets.iloc[np.unique(bootstrap_indexes[i])], \n","            depth_limit=depth_limit, \n","            objects_in_node_minimum_count=objects_in_node_minimum_count), None])  \n","    return self\n","\n","  def predict(self, test_data):\n","    predicts_all = []\n","    for tree, subspaces in tqdm(self.trees):\n","      predicts_all.append(np.argmax(tree.predict(test_data), axis=1))\n","    predicts = []\n","    for i in range(len(test_data)):\n","      predicts.append(np.argmax(np.bincount(np.array(predicts_all)[:, i])))\n","    return predicts\n","\n","  def score(self, X_test):\n","    return accuracy_score(np.argmax(self.predict(X_test), axis=1), y_test)\n","\n"],"execution_count":76,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YJBQ8lc0WyrN"},"source":["### Задание 4.2"]},{"cell_type":"markdown","metadata":{"id":"y594Jn04ZTCm"},"source":["В качестве набора данных используйте: https://www.kaggle.com/mathchi/churn-for-bank-customers\n","\n","Там есть описание и примеры работы с этими данными. Если кратко, речь идёт про задачу прогнозирования оттока клиентов. Есть данные о 10 тысячах клиентов банка, часть из которых больше не являются клиентами."]},{"cell_type":"markdown","metadata":{"id":"be_mLbdVW2oG"},"source":["Используя либо свою реализацию, либо  `DecisionTreeClassifier` с разными настройками из `sklearn.tree` реализйте алгоритм \"случайный лес\". \n","\n","Найдите наилучшие гиперпараметры этого алгоритма: количество деревьев, критерий остановки, функционал качества, минимальное количество объектов в листьях и другие.\n","\n","Нельзя использовать готовую реализацию случайного леса из `sklearn`.\n","\n","В подобных задачах очень важна интерпретируемость алгоритма. Попытайтесь оценить информативность признаков, т.е. ответить а вопрос, значения каких признаков являются самыми важными индикаторами того, что банк потеряет клиента."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":439},"id":"k6lP0KI_mzjY","executionInfo":{"status":"ok","timestamp":1637775699904,"user_tz":-180,"elapsed":866,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"2ec91329-c090-4dc0-ad72-d1fe170bdc97"},"source":["url = \"https://drive.google.com/file/d/1JhmbL0743_my1O48Z3bxyGooWcb1gnSu/view?usp=sharing\"\n","url2 = 'https://drive.google.com/uc?id=' + url.split('/')[-2]\n","data = pd.read_csv(url2)  # churn.csv\n","data"],"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RowNumber</th>\n","      <th>CustomerId</th>\n","      <th>Surname</th>\n","      <th>CreditScore</th>\n","      <th>Geography</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>NumOfProducts</th>\n","      <th>HasCrCard</th>\n","      <th>IsActiveMember</th>\n","      <th>EstimatedSalary</th>\n","      <th>Exited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>15634602</td>\n","      <td>Hargrave</td>\n","      <td>619</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>2</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101348.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>15647311</td>\n","      <td>Hill</td>\n","      <td>608</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>83807.86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>112542.58</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>15619304</td>\n","      <td>Onio</td>\n","      <td>502</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>8</td>\n","      <td>159660.80</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113931.57</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>15701354</td>\n","      <td>Boni</td>\n","      <td>699</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>39</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>93826.63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>15737888</td>\n","      <td>Mitchell</td>\n","      <td>850</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>43</td>\n","      <td>2</td>\n","      <td>125510.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>79084.10</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9995</th>\n","      <td>9996</td>\n","      <td>15606229</td>\n","      <td>Obijiaku</td>\n","      <td>771</td>\n","      <td>France</td>\n","      <td>Male</td>\n","      <td>39</td>\n","      <td>5</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>96270.64</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>9997</td>\n","      <td>15569892</td>\n","      <td>Johnstone</td>\n","      <td>516</td>\n","      <td>France</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>10</td>\n","      <td>57369.61</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101699.77</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>9998</td>\n","      <td>15584532</td>\n","      <td>Liu</td>\n","      <td>709</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>36</td>\n","      <td>7</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>42085.58</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>9999</td>\n","      <td>15682355</td>\n","      <td>Sabbatini</td>\n","      <td>772</td>\n","      <td>Germany</td>\n","      <td>Male</td>\n","      <td>42</td>\n","      <td>3</td>\n","      <td>75075.31</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>92888.52</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>10000</td>\n","      <td>15628319</td>\n","      <td>Walker</td>\n","      <td>792</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>28</td>\n","      <td>4</td>\n","      <td>130142.79</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38190.78</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10000 rows × 14 columns</p>\n","</div>"],"text/plain":["      RowNumber  CustomerId    Surname  ...  IsActiveMember EstimatedSalary Exited\n","0             1    15634602   Hargrave  ...               1       101348.88      1\n","1             2    15647311       Hill  ...               1       112542.58      0\n","2             3    15619304       Onio  ...               0       113931.57      1\n","3             4    15701354       Boni  ...               0        93826.63      0\n","4             5    15737888   Mitchell  ...               1        79084.10      0\n","...         ...         ...        ...  ...             ...             ...    ...\n","9995       9996    15606229   Obijiaku  ...               0        96270.64      0\n","9996       9997    15569892  Johnstone  ...               1       101699.77      0\n","9997       9998    15584532        Liu  ...               1        42085.58      1\n","9998       9999    15682355  Sabbatini  ...               0        92888.52      1\n","9999      10000    15628319     Walker  ...               0        38190.78      0\n","\n","[10000 rows x 14 columns]"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"EufWR30PoM26","executionInfo":{"status":"ok","timestamp":1637775701797,"user_tz":-180,"elapsed":224,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["data_for_predictions = data.drop(['RowNumber', 'CustomerId', 'Surname'], axis=1).copy()"],"execution_count":78,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":439},"id":"PALAe71voRi-","executionInfo":{"status":"ok","timestamp":1637775703474,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"5d11cf22-25ec-49bf-ab68-3401e1e8ce21"},"source":["from sklearn.preprocessing import LabelEncoder\n","\n","le = LabelEncoder()\n","data_for_predictions['Geography'] = le.fit_transform(data_for_predictions['Geography'].values)\n","data_for_predictions['Gender'] = le.fit_transform(data_for_predictions['Gender'].values)\n","\n","data_for_predictions"],"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CreditScore</th>\n","      <th>Geography</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>NumOfProducts</th>\n","      <th>HasCrCard</th>\n","      <th>IsActiveMember</th>\n","      <th>EstimatedSalary</th>\n","      <th>Exited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>619</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>2</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101348.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>608</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>83807.86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>112542.58</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>502</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>8</td>\n","      <td>159660.80</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113931.57</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>699</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>93826.63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>850</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>43</td>\n","      <td>2</td>\n","      <td>125510.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>79084.10</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9995</th>\n","      <td>771</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>5</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>96270.64</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>516</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>10</td>\n","      <td>57369.61</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101699.77</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>709</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>36</td>\n","      <td>7</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>42085.58</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>772</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>42</td>\n","      <td>3</td>\n","      <td>75075.31</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>92888.52</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>792</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>28</td>\n","      <td>4</td>\n","      <td>130142.79</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38190.78</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10000 rows × 11 columns</p>\n","</div>"],"text/plain":["      CreditScore  Geography  Gender  ...  IsActiveMember  EstimatedSalary  Exited\n","0             619          0       0  ...               1        101348.88       1\n","1             608          2       0  ...               1        112542.58       0\n","2             502          0       0  ...               0        113931.57       1\n","3             699          0       0  ...               0         93826.63       0\n","4             850          2       0  ...               1         79084.10       0\n","...           ...        ...     ...  ...             ...              ...     ...\n","9995          771          0       1  ...               0         96270.64       0\n","9996          516          0       1  ...               1        101699.77       0\n","9997          709          0       0  ...               1         42085.58       1\n","9998          772          1       1  ...               0         92888.52       1\n","9999          792          0       0  ...               0         38190.78       0\n","\n","[10000 rows x 11 columns]"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"QRyQ2SCooUIF","executionInfo":{"status":"ok","timestamp":1637775705841,"user_tz":-180,"elapsed":308,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["data_for_predictions_shuffled = data_for_predictions.sample(frac=1).reset_index(drop=True)\n","data_train = data_for_predictions_shuffled[:7000]\n","data_test = data_for_predictions_shuffled[7000:10000]\n","X_train = data_train.drop(['Exited'], axis=1)\n","y_train = data_train['Exited']\n","X_test = data_test.drop(['Exited'], axis=1)\n","y_test = data_test['Exited']"],"execution_count":80,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fgsVHnMQoXJE","executionInfo":{"status":"ok","timestamp":1637775775271,"user_tz":-180,"elapsed":68177,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"dd87b28d-c9ad-4950-a917-186c719ec13e"},"source":["dt = DecisionTree().fit(X_train, y_train, objects_in_node_minimum_count=1)\n","\n","print(accuracy_score(np.argmax(dt.predict(X_train), axis=1), y_train))\n","print(accuracy_score(np.argmax(dt.predict(X_test), axis=1), y_test))"],"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n","0.791\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kOiVEfZPoaEY","executionInfo":{"status":"ok","timestamp":1637775882101,"user_tz":-180,"elapsed":105878,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"1d340bb2-f1a3-45ee-8d44-38f3da448617"},"source":["rf = RandomForest().fit(X_train, y_train, 20, depth_limit=20)\n","print(accuracy_score(rf.predict(X_train), y_train))\n","print(accuracy_score(rf.predict(X_test), y_test))"],"execution_count":82,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 20/20 [01:13<00:00,  3.66s/it]\n","100%|██████████| 20/20 [00:21<00:00,  1.07s/it]\n"]},{"output_type":"stream","name":"stdout","text":["0.863\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 20/20 [00:09<00:00,  2.13it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.8596666666666667\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7L1VDjsbzJ0B","executionInfo":{"status":"ok","timestamp":1637776218640,"user_tz":-180,"elapsed":229919,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"345493b4-03f7-41ed-8cd8-a00bd0a32f56"},"source":["rf = RandomForest().fit(X_train, y_train, 100, depth_limit=100)\n","print(accuracy_score(rf.predict(X_train), y_train))\n","print(accuracy_score(rf.predict(X_test), y_test))"],"execution_count":84,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [01:17<00:00,  1.29it/s]\n","100%|██████████| 100/100 [01:40<00:00,  1.00s/it]\n"]},{"output_type":"stream","name":"stdout","text":["0.8452857142857143\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [00:43<00:00,  2.28it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.8323333333333334\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKh0m5yizT_t","executionInfo":{"status":"ok","timestamp":1637776711401,"user_tz":-180,"elapsed":153597,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"a0db776e-99b9-4ed6-e7d6-e3f149bdd8c2"},"source":["rf2 = RandomForest().fit(X_train, y_train, 50, depth_limit=20)\n","print(accuracy_score(rf2.predict(X_train), y_train))\n","print(accuracy_score(rf2.predict(X_test), y_test))"],"execution_count":87,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 50/50 [01:15<00:00,  1.52s/it]\n","100%|██████████| 50/50 [00:51<00:00,  1.03s/it]\n"]},{"output_type":"stream","name":"stdout","text":["0.8551428571428571\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 50/50 [00:22<00:00,  2.23it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.841\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J80tNSivzYmv","executionInfo":{"status":"ok","timestamp":1637777171967,"user_tz":-180,"elapsed":230358,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"69c7f16a-fd92-4103-8b81-889c46ae180c"},"source":["rf100 = RandomForest().fit(X_train, y_train, 100, depth_limit=20)\n","print(accuracy_score(rf100.predict(X_train), y_train))\n","print(accuracy_score(rf100.predict(X_test), y_test))"],"execution_count":89,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [01:18<00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:39<00:00,  1.00it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.8431428571428572\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [00:43<00:00,  2.28it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.832\n"]}]},{"cell_type":"code","metadata":{"id":"Gfy0NGRqzg5Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637777966773,"user_tz":-180,"elapsed":794813,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"41399edd-b3ea-4d99-8fb2-f3f2f23b31bf"},"source":["rf100_unlimited = RandomForest().fit(X_train, y_train, 500, depth_limit=2000)\n","print(accuracy_score(rf100_unlimited.predict(X_train), y_train))\n","print(accuracy_score(rf100_unlimited.predict(X_test), y_test))"],"execution_count":90,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [01:14<00:00,  6.69it/s]\n","100%|██████████| 500/500 [07:51<00:00,  1.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.805\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [03:23<00:00,  2.46it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.794\n"]}]},{"cell_type":"markdown","metadata":{"id":"eW3xYWgYECkW"},"source":["### Вывод\n","\n","Лучшие результаты были получены при 20 деревьях и ограничении на глубину дерева 20."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xI695mBoEErp","executionInfo":{"status":"ok","timestamp":1637780246775,"user_tz":-180,"elapsed":108795,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"2afad305-e6d0-47b7-fd3f-671482eb7fc7"},"source":["tmp_features_sums = dict()\n","for feature in X_train.columns:\n","  tmp_features_sums[feature] = 0\n","\n","\n","rf3 = RandomForest().fit(X_train, y_train, 20, depth_limit=20)\n","print(accuracy_score(rf3.predict(X_train), y_train))\n","print(accuracy_score(rf3.predict(X_test), y_test))\n","\n","tmp_features_sums_sum = np.array(list(tmp_features_sums.values())).sum() \n","tmp_features_sums_relative = dict()\n","for key, value in tmp_features_sums.items():\n","  tmp_features_sums_relative[key] = value / tmp_features_sums_sum\n","\n","print(\"Features importance: \", tmp_features_sums)"],"execution_count":102,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 20/20 [01:15<00:00,  3.79s/it]\n","100%|██████████| 20/20 [00:21<00:00,  1.08s/it]\n"]},{"output_type":"stream","name":"stdout","text":["0.8632857142857143\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 20/20 [00:09<00:00,  2.13it/s]\n"]},{"output_type":"stream","name":"stdout","text":["0.852\n","Features importance:  {'CreditScore': 194.29365636008674, 'Geography': 36.244831134500615, 'Gender': 15.951271612453144, 'Age': 65.75131067348799, 'Tenure': 40.91027138828347, 'Balance': 39.42715966029742, 'NumOfProducts': 13.50980437015708, 'HasCrCard': 14.825881387093128, 'IsActiveMember': 10.324145158936402, 'EstimatedSalary': 35.2216197732609}\n"]}]},{"cell_type":"markdown","metadata":{"id":"tmmgYZgJENRY"},"source":["Наиболее значимые признаки (те, которые вносят наибольший вклад в прирост информации):"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j_OIUw05EJwr","executionInfo":{"status":"ok","timestamp":1637780254122,"user_tz":-180,"elapsed":232,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"9037e1a8-4e9b-4c00-cc66-cf5424948b2c"},"source":["ar = np.array(list(tmp_features_sums_relative.items()))\n","\n","ar[ar[:, 1].argsort()[::-1]]"],"execution_count":103,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['CreditScore', '0.41652805504002044'],\n","       ['Age', '0.14095810467637165'],\n","       ['Tenure', '0.08770371658938861'],\n","       ['Balance', '0.08452421163262268'],\n","       ['Geography', '0.07770191420829556'],\n","       ['EstimatedSalary', '0.07550834676931466'],\n","       ['Gender', '0.03419644400451507'],\n","       ['HasCrCard', '0.03178382482532012'],\n","       ['NumOfProducts', '0.02896241001221222'],\n","       ['IsActiveMember', '0.022132972241938935']], dtype='<U20')"]},"metadata":{},"execution_count":103}]}]}