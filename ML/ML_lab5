{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"colab":{"name":"ML_lab5","provenance":[{"file_id":"1qNXv_GzDzMxqhzu-N2S2grEhkKHwwoRy","timestamp":1637770591369},{"file_id":"1SOx8vThNzVFZR_zaUlIZ56WxGNaVJ1hk","timestamp":1604754473954},{"file_id":"1XUT-Qa-VLIAMmHbt6pe3AdzDLSyaFoWv","timestamp":1604677054518},{"file_id":"1UpsFM_rY1G1r2EBkqj-A-3wpk1l_Ambe","timestamp":1596006394187},{"file_id":"1TtILmuSoWXOYmbTIAQmGaScvuHGWvpsI","timestamp":1595563808854},{"file_id":"1EdBdyqxLu-WiLmriWNwYl5Ct33JYcEG2","timestamp":1582113683695},{"file_id":"10_Aehfbxgr3fxXPgI1gM5BTU8yOy-Z4U","timestamp":1579514615233}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"UHX9p5jfTySS"},"source":["## Задание 5.1"]},{"cell_type":"markdown","metadata":{"id":"0EnHNZtbXlH0"},"source":["Набор данных тут: https://github.com/sismetanin/rureviews, также есть в папке [Data](https://drive.google.com/drive/folders/1YAMe7MiTxA-RSSd8Ex2p-L0Dspe6Gs4L). Те, кто предпочитает работать с английским языком, могут использовать набор данных `sms_spam`."]},{"cell_type":"code","metadata":{"id":"qV6HWLZ_jvuK"},"source":["import warnings\n","warnings.filterwarnings('ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vT3mJY3GZnWH","executionInfo":{"status":"ok","timestamp":1637788172016,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"288711ac-3354-4ac0-9e6b-abfda3098e3e"},"source":["import pandas as pd\n","import numpy as np\n","import math\n","import string\n","\n","from sklearn.metrics import *\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","import nltk\n","from nltk.tokenize import word_tokenize, sent_tokenize\n","from nltk.corpus import stopwords\n","\n","nltk.download('stopwords')\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bs0CHbjyZfBN","executionInfo":{"status":"ok","timestamp":1637788177305,"user_tz":-180,"elapsed":3015,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"1f14597e-329d-4659-d455-5fbebd7f1968"},"source":["!pip install pymorphy2\n","\n","from pymorphy2 import MorphAnalyzer"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pymorphy2 in /usr/local/lib/python3.7/dist-packages (0.9.1)\n","Requirement already satisfied: docopt>=0.6 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.6.2)\n","Requirement already satisfied: dawg-python>=0.7.1 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.7.2)\n","Requirement already satisfied: pymorphy2-dicts-ru<3.0,>=2.4 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (2.4.417127.4579844)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"rIx4E7NwW7qd","executionInfo":{"status":"ok","timestamp":1637788179878,"user_tz":-180,"elapsed":1544,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"0879580e-53ae-461f-efc8-ab495b0f1fba"},"source":["df = pd.read_csv(\"https://www.dropbox.com/s/lezygjs4oxvrdh5/women-clothing-accessories.csv?dl=1\", sep='\\t', usecols=[0, 1])\n","df['review'] = df['review'].str.strip()\n","df.replace('', np.nan, inplace=True)\n","df.dropna(subset=['review'], inplace=True)\n","\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>качество плохое пошив ужасный (горловина напер...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Товар отдали другому человеку, я не получила п...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Ужасная синтетика! Тонкая, ничего общего с пре...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>товар не пришел, продавец продлил защиту без м...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Кофточка голая синтетика, носить не возможно.</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review sentiment\n","0  качество плохое пошив ужасный (горловина напер...  negative\n","1  Товар отдали другому человеку, я не получила п...  negative\n","2  Ужасная синтетика! Тонкая, ничего общего с пре...  negative\n","3  товар не пришел, продавец продлил защиту без м...  negative\n","4      Кофточка голая синтетика, носить не возможно.  negative"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oG8KC2xHkE6y","executionInfo":{"status":"ok","timestamp":1637788180749,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"d5458b6e-2c64-4ed3-ff7f-34d3d20094e6"},"source":["df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(89999, 2)"]},"metadata":{},"execution_count":87}]},{"cell_type":"markdown","metadata":{"id":"bJox-LoonoPx"},"source":["Применим полученные навыки и решим задачу анализа тональности отзывов. \n","\n","Нужно повторить весь пайплайн от сырых текстов до получения обученной модели.\n","\n","Обязательные шаги предобработки:\n","1. токенизация\n","2. приведение к нижнему регистру\n","3. удаление стоп-слов\n","4. лемматизация\n","5. векторизация (с настройкой гиперпараметров)\n","6. построение модели\n","7. оценка качества модели\n","\n","Обязательно использование векторайзеров:\n","1. мешок n-грамм (диапазон для n подбирайте самостоятельно, запрещено использовать только униграммы).\n","2. tf-idf ((диапазон для n подбирайте самостоятельно, также нужно подбирать параметры max_df, min_df, max_features)\n","3. символьные n-граммы (диапазон для n подбирайте самостоятельно)\n","\n","В качестве классификатора нужно использовать наивный байесовский классификатор. \n","\n","Для сравнения векторайзеров между собой используйте precision, recall, f1-score и accuracy. Для этого сформируйте датафрейм, в котором в строках будут разные векторайзеры, а в столбцах разные метрики качества, а в  ячейках будут значения этих метрик для соответсвующих векторайзеров."]},{"cell_type":"code","metadata":{"id":"oRfaBru6kPnB"},"source":["# Tokenize and lower case\n","\n","for index, row in df.iterrows():\n","  row['review'] = [[word.lower() for word in word_tokenize(sent) if word.isalpha()] for sent in sent_tokenize(row['review'])]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xoQFNRSflwCZ"},"source":["# Removing stopwords\n","\n","STOPWORDS = set(stopwords.words(\"russian\"))\n","\n","for index, row in df.iterrows():\n","  row['review'] = [[word for word in sent if word not in STOPWORDS] for sent in row['review']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"50dsRhYFmGwR"},"source":["# Lemmatization\n","\n","predictor = MorphAnalyzer()\n","for index, row in df.iterrows():\n","  row['review'] = [predictor.parse(word)[0].normal_form for sent in row['review'] for word in sent]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"gqqQpn67n0vw","executionInfo":{"status":"ok","timestamp":1637788470227,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"c9815fde-68fb-45ea-fdb9-0fbffdbf46d3"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[качество, плохой, пошив, ужасный, горловина, ...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[товар, отдать, другой, человек, получить, пос...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[ужасный, синтетик, тонкий, общий, представить...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[товар, прийти, продавец, продлить, защита, мо...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[кофточка, голый, синтетик, носить, возможно]</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review sentiment\n","0  [качество, плохой, пошив, ужасный, горловина, ...  negative\n","1  [товар, отдать, другой, человек, получить, пос...  negative\n","2  [ужасный, синтетик, тонкий, общий, представить...  negative\n","3  [товар, прийти, продавец, продлить, защита, мо...  negative\n","4      [кофточка, голый, синтетик, носить, возможно]  negative"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zxk_oxIErZuz","executionInfo":{"status":"ok","timestamp":1637788483421,"user_tz":-180,"elapsed":9125,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"3522a313-0cdf-48d3-9bee-02d8e84e0618"},"source":["# Save preprocessed data\n","\n","from google.colab import drive\n","import os\n","\n","drive.mount(\"/content/drive\")\n","os.chdir(r\"/content/drive/MyDrive/Colab Notebooks/\")\n","\n","for index, row in df.iterrows():\n","  row['review'] = \" \".join(row['review'])\n","df.to_csv(\"ML_lab5_preprocessed.csv\", sep=';')\n","\n","df_preprocessed = pd.read_csv(\"ML_lab5_preprocessed.csv\", sep=';', usecols=[1,2])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qQGMJP2okPpi","executionInfo":{"status":"ok","timestamp":1637788485615,"user_tz":-180,"elapsed":230,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"6f99d31a-d5e6-4983-9daa-b7180c23c274"},"source":["# Split data\n","\n","df = df_preprocessed\n","df.dropna(subset=['review'], inplace=True)\n","\n","X_train, X_test, y_train, y_test = train_test_split(df.review, df.sentiment, train_size=0.7, random_state=42)\n","\n","df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(89723, 2)"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"tYfMkOZCb-Y2"},"source":["# Vectorization\n","\n","reports = {'word_ngram': [],\n","           'tfidf': [],\n","           'char_nagram': []}\n","\n","for ngram_range in [(i,j) for i in range(1,4) for j in range(i,4)]:\n","  vectorizer = CountVectorizer(ngram_range=ngram_range, stop_words=stopwords.words(\"russian\"), analyzer=\"word\")\n","  X_train_vec = vectorizer.fit_transform(X_train)\n","  model = MultinomialNB()\n","  model.fit(X_train_vec, y_train)\n","  X_test_vec = vectorizer.transform(X_test)\n","  pred = model.predict(X_test_vec)\n","  report = classification_report(y_test, pred, output_dict=True)\n","  report['vectorizer_type'] = 'CountVectorizer'\n","  report['analyzer_type'] = 'word'\n","  report['input_params'] = [f\"ngram_range={ngram_range}\"]\n","  reports['word_ngram'].append(report)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PHWsPFwGtcBX"},"source":["for ngram_range in [(i,j) for i in range(4,11) for j in range(i,11)]:\n","  vectorizer = CountVectorizer(ngram_range=ngram_range, stop_words=stopwords.words(\"russian\"), analyzer=\"char\")\n","  X_train_vec = vectorizer.fit_transform(X_train)\n","  model = MultinomialNB()\n","  model.fit(X_train_vec, y_train)\n","  X_test_vec = vectorizer.transform(X_test)\n","  pred = model.predict(X_test_vec)\n","  report = classification_report(y_test, pred, output_dict=True)\n","  report['vectorizer_type'] = 'CountVectorizer'\n","  report['analyzer_type'] = 'char'\n","  report['input_params'] = [f\"ngram_range={ngram_range}\"]\n","  reports['char_nagram'].append(report)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pARC-Y1ztcur"},"source":["max_dfs = [0.1, 0.5]\n","min_dfs = [0.0001, 0.01]\n","max_feats = [2048, 8192, 32768]\n","for ngram_range in [(i,j) for i in range(2,4) for j in range(i,4)]:\n","  for min_df in min_dfs:\n","    for max_df in max_dfs:\n","      for max_features in max_feats:\n","          vectorizer = TfidfVectorizer(ngram_range=ngram_range, max_df=max_df, min_df=min_df, max_features=max_features)\n","          X_train_vec = vectorizer.fit_transform(X_train)\n","          model = MultinomialNB()\n","          model.fit(X_train_vec, y_train)\n","          X_test_vec = vectorizer.transform(X_test)\n","          pred = model.predict(X_test_vec)\n","          report = classification_report(y_test, pred, output_dict=True)\n","          report['vectorizer_type'] = 'TfidfVectorizer'\n","          report['analyzer_type'] = 'word'\n","          report['input_params'] = [f'ngram_range={ngram_range}', f'max_df={max_df}', f'min_df={min_df}', f'max_features={max_features}']\n","          reports['tfidf'].append(report)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fil8BeMWv6xp"},"source":["raw = []\n","for vec_method in reports:\n","  method_report = reports[vec_method]\n","  for report in method_report:\n","    score = report['weighted avg']\n","    raw.append({'vectorizer_type': report['vectorizer_type'],\n","                'analyzer_type': report['analyzer_type'],\n","                'parameters': report['input_params'], \n","                'precision': score['precision'], \n","                'recall': score['recall'], \n","                'f1-score': score['f1-score']})\n","\n","report_df = pd.DataFrame(raw)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"8pzx2xFowZh1","executionInfo":{"status":"ok","timestamp":1637789740562,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"5293a6d3-f41e-4ceb-bf80-1b9f93c02809"},"source":["report_df.sort_values(by=[\"precision\"], ascending=False).head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vectorizer_type</th>\n","      <th>analyzer_type</th>\n","      <th>parameters</th>\n","      <th>precision</th>\n","      <th>recall</th>\n","      <th>f1-score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>CountVectorizer</td>\n","      <td>word</td>\n","      <td>[ngram_range=(1, 2)]</td>\n","      <td>0.714866</td>\n","      <td>0.713415</td>\n","      <td>0.713258</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CountVectorizer</td>\n","      <td>word</td>\n","      <td>[ngram_range=(1, 3)]</td>\n","      <td>0.711319</td>\n","      <td>0.711818</td>\n","      <td>0.711167</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(4, 10)]</td>\n","      <td>0.711007</td>\n","      <td>0.707137</td>\n","      <td>0.707645</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(5, 10)]</td>\n","      <td>0.710644</td>\n","      <td>0.707768</td>\n","      <td>0.708094</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(4, 9)]</td>\n","      <td>0.709695</td>\n","      <td>0.704796</td>\n","      <td>0.705445</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(5, 9)]</td>\n","      <td>0.709515</td>\n","      <td>0.705836</td>\n","      <td>0.706239</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(5, 8)]</td>\n","      <td>0.708614</td>\n","      <td>0.703719</td>\n","      <td>0.704340</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(4, 8)]</td>\n","      <td>0.708346</td>\n","      <td>0.702753</td>\n","      <td>0.703475</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(5, 7)]</td>\n","      <td>0.706883</td>\n","      <td>0.701378</td>\n","      <td>0.702039</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>CountVectorizer</td>\n","      <td>char</td>\n","      <td>[ngram_range=(4, 7)]</td>\n","      <td>0.706754</td>\n","      <td>0.700301</td>\n","      <td>0.701132</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    vectorizer_type analyzer_type  ...    recall  f1-score\n","1   CountVectorizer          word  ...  0.713415  0.713258\n","2   CountVectorizer          word  ...  0.711818  0.711167\n","49  CountVectorizer          char  ...  0.707137  0.707645\n","55  CountVectorizer          char  ...  0.707768  0.708094\n","48  CountVectorizer          char  ...  0.704796  0.705445\n","54  CountVectorizer          char  ...  0.705836  0.706239\n","53  CountVectorizer          char  ...  0.703719  0.704340\n","47  CountVectorizer          char  ...  0.702753  0.703475\n","52  CountVectorizer          char  ...  0.701378  0.702039\n","46  CountVectorizer          char  ...  0.700301  0.701132\n","\n","[10 rows x 6 columns]"]},"metadata":{},"execution_count":100}]},{"cell_type":"markdown","metadata":{"id":"6juIVw1pwcVj"},"source":["### Вывод\n","\n","Самым лучшим векторайзером стал **CountVectorizer** с анализатором **word** и гиперпараметром **ngram_range=(1, 2)**."]},{"cell_type":"markdown","metadata":{"id":"5QYTwyMtWhAZ"},"source":["## Задание 5.2 Регулярные выражения\n","\n","Регулярные выражения - способ поиска и анализа строк. Например, можно понять, какие даты в наборе строк представлены в формате DD/MM/YYYY, а какие - в других форматах. \n","\n","Или бывает, например, что перед работой с текстом, надо почистить его от своеобразного мусора: упоминаний пользователей, url и так далее.\n","\n","Навык полезный, давайте в нём тоже потренируемся.\n","\n","Для работы с регулярными выражениями есть библиотека **re**"]},{"cell_type":"code","metadata":{"id":"VaUW5S4gWhAb","executionInfo":{"status":"ok","timestamp":1638025033132,"user_tz":-180,"elapsed":249,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["import re"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D6aYh7Osl8xr"},"source":["В регулярных выражениях, кроме привычных символов-букв, есть специальные символы:\n","* **?а** - ноль или один символ **а**\n","* **+а** - один или более символов **а**\n","* **\\*а** - ноль или более символов **а** (не путать с +)\n","* **.** - любое количество любого символа\n","\n","Пример:\n","Выражению \\*a?b. соответствуют последовательности a, ab, abc, aa, aac НО НЕ abb!"]},{"cell_type":"markdown","metadata":{"id":"q7zOFFA3l_KQ"},"source":["Рассмотрим подробно несколько наиболее полезных функций:"]},{"cell_type":"markdown","metadata":{"id":"DbJrUpARWhAd"},"source":["### findall\n","возвращает список всех найденных непересекающихся совпадений.\n","\n","Регулярное выражение **ab+c.**: \n","* **a** - просто символ **a**\n","* **b+** - один или более символов **b**\n","* **c** - просто символ **c**\n","* **.** - любой символ\n"]},{"cell_type":"code","metadata":{"id":"2athHzKuWhAd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637844702417,"user_tz":-180,"elapsed":313,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"c9c69e97-cf7a-46f8-f039-cc4b7d6c8785"},"source":["result = re.findall('ab+c.', 'abcdefghijkabcabcxabc') \n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['abcd', 'abca']\n"]}]},{"cell_type":"markdown","metadata":{"id":"A9FpIw5RWhAf"},"source":["Вопрос на внимательность: почему нет abcx?\n","\n","**Ответ**: Потому что оно пересекается со строкой '*abca*'."]},{"cell_type":"markdown","metadata":{"id":"B5ttzoxEWhAg"},"source":["**Задание**: вернуть список первых двух букв каждого слова в строке, состоящей из нескольких слов."]},{"cell_type":"code","metadata":{"id":"7ZR2AEq3WhAg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638025705918,"user_tz":-180,"elapsed":308,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"24a095a9-f842-4dd3-adae-476252a213b4"},"source":["text = \"Купил мужик шляпу, а она ему как раз! Ой-ой...\"\n","text = re.sub('-', '', text)\n","print(re.findall(r'\\b[\\w]{2}', text))"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["['Ку', 'му', 'шл', 'он', 'ем', 'ка', 'ра', 'Ой']\n"]}]},{"cell_type":"markdown","metadata":{"id":"MI18l-l9WhAk"},"source":["### split\n","разделяет строку по заданному шаблону\n"]},{"cell_type":"code","metadata":{"id":"sVKdRoc1WhAl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637789962161,"user_tz":-180,"elapsed":328,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"e965d402-f53f-4039-9c6e-02f6aca8ae6f"},"source":["result = re.split(',', 'itsy, bitsy, teenie, weenie') \n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['itsy', ' bitsy', ' teenie', ' weenie']\n"]}]},{"cell_type":"markdown","metadata":{"id":"10u5efuSWhAm"},"source":["можно указать максимальное количество разбиений"]},{"cell_type":"code","metadata":{"id":"9U9EQZMwWhAn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637789971051,"user_tz":-180,"elapsed":236,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"6e16609d-51fc-4a60-8c3f-43e9e8906abb"},"source":["result = re.split(',', 'itsy, bitsy, teenie, weenie', maxsplit=2) \n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['itsy', ' bitsy', ' teenie, weenie']\n"]}]},{"cell_type":"markdown","metadata":{"id":"0EMcMyflWhAp"},"source":["**Задание**: разбейте строку, состоящую из нескольких предложений, по точкам, но не более чем на 3 предложения."]},{"cell_type":"code","metadata":{"id":"dVgPSjEOWhAp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637790000333,"user_tz":-180,"elapsed":251,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"bd897676-7fa0-4456-bf02-fb13269cd688"},"source":["result = re.split(r'\\.', 'itsy. bitsy. teenie. weenie.', maxsplit=2) \n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['itsy', ' bitsy', ' teenie. weenie.']\n"]}]},{"cell_type":"markdown","metadata":{"id":"1wrEGqBSWhAr"},"source":["### sub\n","ищет шаблон в строке и заменяет все совпадения на указанную подстроку\n","\n","параметры: (pattern, repl, string)"]},{"cell_type":"code","metadata":{"id":"az3KxKWwWhAr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637792026203,"user_tz":-180,"elapsed":286,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"4122be97-7b2a-4ab7-a548-a3c2bd1ab15d"},"source":["result = re.sub('a', 'b', 'abcabc')\n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["bbcbbc\n"]}]},{"cell_type":"markdown","metadata":{"id":"qD0n7_HPWhAt"},"source":["**Задание**: напишите регулярное выражение, которое позволит заменить все цифры в строке на \"DIG\"."]},{"cell_type":"code","metadata":{"id":"s_Sdu7xlWhAu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637846440391,"user_tz":-180,"elapsed":234,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"4436d0e8-54fc-4336-9b8c-56fae5e9d48e"},"source":["result = re.sub(r'\\d+', 'DIG', '132test8849320')\n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["DIGtestDIG\n"]}]},{"cell_type":"markdown","metadata":{"id":"b8__oi1PWhAv"},"source":["**Задание**: напишите  регулярное выражение, которое позволит убрать url из строки."]},{"cell_type":"code","metadata":{"id":"KwNS9zt4WhAv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637790155894,"user_tz":-180,"elapsed":327,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"cff137ef-9f27-4e0f-9035-a27700b0942e"},"source":["result = re.sub(r'\\b\\S+://\\S+\\b', '', 'Мой сайт: https://kalkolay.github.io \\n[ДАННЫЕ УДАЛЕНЫ]')\n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Мой сайт:  \n","[ДАННЫЕ УДАЛЕНЫ]\n"]}]},{"cell_type":"markdown","metadata":{"id":"gStgBJy2WhAx"},"source":["### compile\n","компилирует регулярное выражение в отдельный объект"]},{"cell_type":"code","metadata":{"id":"JstTupisWhAy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637790179493,"user_tz":-180,"elapsed":252,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"6032cb54-85a7-4618-9abb-fa98a7686c3a"},"source":["# Пример: построение списка всех слов строки:\n","prog = re.compile('[А-Яа-яё\\-]+')\n","prog.findall(\"Слова? Да, больше, ещё больше слов! Что-то ещё.\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Слова', 'Да', 'больше', 'ещё', 'больше', 'слов', 'Что-то', 'ещё']"]},"metadata":{},"execution_count":111}]},{"cell_type":"markdown","metadata":{"id":"WXEXc3G0WhA2"},"source":["**Задание**: для выбранной строки постройте список слов, которые длиннее трех символов."]},{"cell_type":"code","metadata":{"id":"nFvnIWbUWhA2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637790447400,"user_tz":-180,"elapsed":275,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"ccca6d13-4466-4f06-9711-64c797e8e139"},"source":["text = \"Оно, конечно же, не то, чтобы что либо. Тем более вообще! Но, что касается всего этого, оно завсегда буквально! Разумеется, конечно же, это не так, как дескать, ну а ежели как что, так вот вам и пожалуйста!\"\n","pattern = re.compile(r\"\\w{4,}\")\n","pattern.findall(text)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['конечно',\n"," 'чтобы',\n"," 'либо',\n"," 'более',\n"," 'вообще',\n"," 'касается',\n"," 'всего',\n"," 'этого',\n"," 'завсегда',\n"," 'буквально',\n"," 'Разумеется',\n"," 'конечно',\n"," 'дескать',\n"," 'ежели',\n"," 'пожалуйста']"]},"metadata":{},"execution_count":115}]},{"cell_type":"markdown","metadata":{"id":"SQDNZ3HQWhA3"},"source":["**Задание**: вернуть список доменов (@gmail.com) из списка адресов электронной почты:\n","\n","```\n","abc.test@gmail.com, xyz@test.in, test.first@analyticsvidhya.com, first.test@rest.biz\n","```"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MsMjaj6Z6cod","executionInfo":{"status":"ok","timestamp":1638025426720,"user_tz":-180,"elapsed":246,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"028755d7-586d-4c07-f46e-aab731c28559"},"source":["text = \"abc.test@gmail.com, xyz@test.in, test.first@analyticsvidhya.com, first.test@rest.biz\"\n","pattern = re.compile(r\"@[\\w.]{2,255}\")\n","pattern.findall(text)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['@gmail.com', '@test.in', '@analyticsvidhya.com', '@rest.biz']"]},"metadata":{},"execution_count":15}]}]}