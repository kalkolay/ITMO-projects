{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"colab":{"name":"M33122 Федотенко \"Контрольная работа 1 v2.ipynb\"","provenance":[{"file_id":"1yXlUU1Q2JX1xaX9tTgmdm3mwFegkZDNP","timestamp":1635151396721},{"file_id":"1WkfEYHzFv-gCB2mSZzCKo64RCTzPKCqF","timestamp":1635146834370},{"file_id":"1C__qwW1XHxb8V1S-VBl0aUIs60C8i4XZ","timestamp":1603813504364},{"file_id":"13f5fqBM4UwfYNSlN875KVxhTK9m9T-Lv","timestamp":1596005590563},{"file_id":"1kqwKoBxu4k4IHygJbxVzPPzaLohsAB3m","timestamp":1595316081847}],"collapsed_sections":["pJyxgxErLqbg","y8BB5t5DLqb8","RQS6gBO1Lqc5"]}},"cells":[{"cell_type":"markdown","metadata":{"id":"LYKqDli0Lqas"},"source":["# Рубежная контрольная работа\n","\n","*Эту работу выполнять не обязательно. Баллы, набранные за эту контрольную работу просуммируются с баллами, которые будут набраны за контрольную работу 2 и выставлены как оценка за экзамен \"автоматом\". Если вы не выполните эту работу, переписать её будет невозможно, просто приходите на экзамен и добирайте баллы там.*"]},{"cell_type":"markdown","metadata":{"id":"Cdt8kOfu4K3x"},"source":["Сделайте копию ноутбука\n","\n","Присвойте переменной `v` значение свой табельный номер ИСУ, это нужно для определения вашего варианта. Запустите код в следующей ячейке."]},{"cell_type":"code","metadata":{"id":"38Ryn8pjvYqb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635151452286,"user_tz":-180,"elapsed":288,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"68c75666-b877-4625-8767-ca561e673584"},"source":["from datetime import datetime\n","current_datetime = datetime.now()\n","print(current_datetime)\n","v = 242257"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-10-25 08:44:11.644787\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qr0CAgObPOv7"},"source":["## Описание метрического алгоритма"]},{"cell_type":"markdown","metadata":{"id":"OFP_i1F1Lqay"},"source":["Пусть задана обучающая выборка пар \"объект-ответ\" $X^m = \\{(x_1,y_1),\\dots,(x_m,y_m)\\}.$\n","\n","Пусть на множестве объектов задана функция расстояния $\\rho(x,x')$. Чем больше значение этой функции, тем менее схожими являются два объекта $x, x'$. \n","В простейшем случае используется евклидова метрика: $\\rho(x,x') = \\sqrt {\\sum _{i=1}^{n}(x_{i}-x'_{i})^{2}}$,\n","\n","Для произвольного объекта $u$ расположим объекты обучающей выборки $x_i$ в порядке возрастания расстояний до $u$:\n","\n","$$\\rho(u,x_{1; u}) \\leq  \\rho(u,x_{2; u}) \\leq \\cdots \\leq \\rho(u,x_{m; u}),$$\n","где через $x_{i; u}$ обозначается тот объект обучающей выборки, который является $i$-м соседом объекта $u$. Аналогичное обозначение введём и для ответа на $i$-м соседе: $y_{i; u}$. Таким образом, произвольный объект $u$ порождает свою перенумерацию выборки. В наиболее общем виде алгоритм ближайших соседей есть:\n","$$a(u) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] w(i,u),$$\n","где $w(i,u)$ - заданная весовая функция, которая оценивает степень важности $i$-го соседа для классификации объекта $u$. Естественно полагать, что эта функция не отрицательна и не возрастает по $i$ (поскольку чем дальше объект, тем меньший вклад он должен вносить в пользу своего класса).\n","\n","По-разному задавая весовую функцию, можно получать различные варианты метода ближайших соседей.\n","\n","$w(i,u) = [i=1]$ - простейший метод ближайшего соседа;\n","\n","$w(i,u) = [i\\leq k]$ - метод $k$ ближайших соседей;\n","\n","$w(i,u) = [i\\leq k] q^i$ - метод $k$ экспоненциально взвешенных ближайших соседей, где предполагается константа $q < 1$\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9O9wv47JPzIf"},"source":["**Использование ядер сглаживания**\n","\n","Для избежания неоднозначности ответа при классификации в качестве весовой функции $w(i, u)$ используют функцию ядра $K(r)$\n","\n","Примеры ядер:\n","\n","Triangular: ${\\displaystyle K(r)=(1-|r|)}$,\n","\n","Parabolic: ${\\displaystyle K(r)={\\frac {3}{4}}(1-r^{2})}$,\n","\n","Tricube: ${\\displaystyle K(r)={\\frac {70}{81}}(1-{\\left|r\\right|}^{3})^{3}}$.\n","\n","**Метод парзеновского окна**\n","\n","Алгоритм $k$ ближайших соседей можно обобщить с помощью функции ядра. Рассмотрим два способа, которыми это можно сделать.\n","\n","Метод парзеновского окна фиксированной ширины  $h$:\n","$$w(i,u) = K\\biggl(\\frac{\\rho(u,x_{i; u})}{h}\\biggr)$$\n","\n","Метод парзеновского окна переменной ширины:\n","$$w(i,u) = K\\biggl(\\frac{\\rho(u,x_{i; u})}{\\rho(u,x_{k+1; u})}\\biggr)$$\n","\n","Таким образом классификаторы, полученные при использовании этих методов, можно записать в следующем виде\n","\n","Фиксированной ширины: $$a_h = a(u, X^m, \\boldsymbol{h}, K) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] K\\biggl(\\frac{\\rho(u,x_{i; u})}{h}\\biggr)$$\n","\n","Переменной ширины (фиксированное число соседей): \n","$$a_k = a(u, X^m, \\boldsymbol{k}, K) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] K\\biggl(\\frac{\\rho(u,x_{i; u})}{\\rho(u,x_{k+1; u})}\\biggr)$$\n"]},{"cell_type":"markdown","metadata":{"id":"QChjKJIRPWty"},"source":["## Задание 1 (7 баллов)\n","\n","В задании требуется написать свою реализацию метрического алгоритма. \n","\n","В качестве расстояния между объектами в этом задании используйте евклидово расстояние. \n","\n","В качестве функции ядра используйте Triangular."]},{"cell_type":"markdown","metadata":{"id":"F57T22yav-gp"},"source":["Для выбора варианта, запустите код в следующей ячейке\n","\n"]},{"cell_type":"code","metadata":{"id":"zFcuNXzcwMbH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635151466892,"user_tz":-180,"elapsed":293,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"ae9167e3-502d-4d21-dfbd-cb025951ae1c"},"source":["if (int(str(v)[4]) % 2) == 0:\n","  print ('1.1 В алгоритме число соседей должно быть фиксированным. Настроить гиперпараметр k, для оценки качества использовать ROC-AUC')\n","else:\n","  print ('1.1 В алгоритме число соседей не должно быть фиксированным. Настроить гиперпараметр h (ширина окна), для оценки качества использовать использовать F1-меру')\n","\n","if (int(str(v)[4]) % 2) == 0:\n","  print ('1.2 Построить график зависимости метрики качества на обучающей выборке от k')\n","else: \n","  print ('1.2 Построить график зависимости метрики качества на контрольной выборке от h')"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["1.1 В алгоритме число соседей не должно быть фиксированным. Настроить гиперпараметр h (ширина окна), для оценки качества использовать использовать F1-меру\n","1.2 Построить график зависимости метрики качества на контрольной выборке от h\n"]}]},{"cell_type":"markdown","metadata":{"id":"ms_1FH-3S_7E"},"source":["Протестирйуте эту реализацию на наборе данных breast_cancer:\n","\n","https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html"]},{"cell_type":"code","metadata":{"id":"gHGUZu8rLqa8","executionInfo":{"status":"ok","timestamp":1635151535652,"user_tz":-180,"elapsed":1166,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["from sklearn.datasets import load_breast_cancer\n","data = load_breast_cancer()"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XL9H9vXATHcc"},"source":["Штрафы:\n","* отсутствие реализации алгоритма (4 балла)\n","* ошибки в реализации алгоритма (2 балла)\n","* отсутствие настройки гиперпараметра (2 балла)\n","* ошибки в настройке гиперпараметра (1 балл)\n","* отсутствие графика (1 балл)"]},{"cell_type":"markdown","metadata":{"id":"jcXkhYj8n9yn"},"source":["## Решение задания 1"]},{"cell_type":"code","metadata":{"id":"guMaFTfVvZDO","executionInfo":{"status":"ok","timestamp":1635155708780,"user_tz":-180,"elapsed":242,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["from math import sqrt, isnan\n","import numpy as np"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3mWhCcQ3n6kD","executionInfo":{"status":"ok","timestamp":1635153888206,"user_tz":-180,"elapsed":302,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"293e56ec-3973-4c1d-8c9a-5646bb16e042"},"source":["def euclidean_distance(x, y):    \n","  distance = 0\n","\n","  if len(x) != len(y):\n","    return distance\n","\n","  for i in range(len(x)):\n","    distance += (y[i] - x[i])**2\n","\n","  return sqrt(distance)\n","\n","\n","euclidean_distance([0, 1], [8, 2])"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8.06225774829855"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"zkrVYJe1vNlu"},"source":["### 1.1"]},{"cell_type":"code","metadata":{"id":"m41Td4ZHvSm6"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z_JxoTpPvTKg"},"source":["### 1.2"]},{"cell_type":"code","metadata":{"id":"2jG7xA-IvVKY"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mz4rsFhALqbJ"},"source":["# Задание 2 (4 балла)"]},{"cell_type":"markdown","metadata":{"id":"EHdzuZj-3dsF"},"source":["Требуется реализовать метрический алгоритм для предсказания действительного числа (то есть как в задаче регрессии, а не как в задаче классификации). \n","\n","В задании 2 не используйте ядра и метод парзеновского окна."]},{"cell_type":"markdown","metadata":{"id":"gOM9Kj8pLqbS"},"source":["Во этом задании в качестве исходных данных используется словарь кинокритиков и выставленных ими оценок"]},{"cell_type":"code","metadata":{"id":"ENkh6Gr98Pit","executionInfo":{"status":"ok","timestamp":1635151580607,"user_tz":-180,"elapsed":258,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["critics={'Lisa Rose': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5,\n"," 'Just My Luck': 3.0, 'Superman Returns': 3.5, 'You, Me and Dupree': 2.5, \n"," 'The Night Listener': 3.0},\n","'Gene Seymour': {'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, \n"," 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, \n"," 'You, Me and Dupree': 3.5}, \n","'Michael Phillips': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0,\n"," 'Superman Returns': 3.5, 'The Night Listener': 4.0},\n","'Claudia Puig': {'Snakes on a Plane': 3.5, 'Just My Luck': 3.0,\n"," 'The Night Listener': 4.5, 'Superman Returns': 4.0, \n"," 'You, Me and Dupree': 2.5},\n","'Mick LaSalle': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, \n"," 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0,\n"," 'You, Me and Dupree': 2.0}, \n","'Jack Matthews': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0,\n"," 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5},\n","'Toby': {'Snakes on a Plane':4.5,'You, Me and Dupree':1.0,'Superman Returns':4.0}}"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MVfEyvFj019l"},"source":["По этому словарю нужно сделать Dataframe в pandas. Строки это критики, столбцы - названия фильмов. На пересечении поставленные оценки. При отсуствии оценки у критика за фильм в датафрейме нужно поставить 0."]},{"cell_type":"markdown","metadata":{"id":"xakj7Hul1jMp"},"source":["Для выбора варианта, запустите код в следующей ячейке"]},{"cell_type":"code","metadata":{"id":"fvyYCARr1gLt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635151595031,"user_tz":-180,"elapsed":270,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"ac799b3d-ce1f-49eb-8585-60a19c425c5d"},"source":["if (int(str(v)[3]) % 2) == 0:\n","  print ('2.1 Сделайте предсказание оценок для критика Toby по фильмам, которые он ещё не видел')\n","else:\n","  print ('2.1 Сделайте предсказание оценок для фильма You, Me and Dupree по критикам, которые его ещё не видели')\n","print ('2.2 Объясните как оценить качество полученного предказания')"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["2.1 Сделайте предсказание оценок для критика Toby по фильмам, которые он ещё не видел\n","2.2 Объясните как оценить качество полученного предказания\n"]}]},{"cell_type":"markdown","metadata":{"id":"1lBTspUZFqWL"},"source":["Штрафы:\n","* отсутствие реализации алгоритма (2 балла)\n","* ошибки в реализации алгоритма (1 балл)\n","* отсутствие тестирования алгоритма (1 балл)\n","* отсутствие объяснения оценки качества алгоритма (1 балл)"]},{"cell_type":"markdown","metadata":{"id":"IIi2WHwBoZpJ"},"source":["## Решение задания 2"]},{"cell_type":"code","metadata":{"id":"H0Z_rDQXodUM","executionInfo":{"status":"ok","timestamp":1635155534703,"user_tz":-180,"elapsed":351,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}}},"source":["import pandas as pd\n","from scipy.stats import pearsonr"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"B8c53cOip0th","executionInfo":{"status":"ok","timestamp":1635155356453,"user_tz":-180,"elapsed":260,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"99b97b7c-1444-4e87-bb8e-8e42a19eb49c"},"source":["df = pd.DataFrame.from_dict(critics, orient='index', dtype=None).fillna(0)\n","display(df)\n","\n","toby = df.loc['Toby']\n","print(\"\\nToby critics:\\n\", toby)"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Lady in the Water</th>\n","      <th>Snakes on a Plane</th>\n","      <th>Just My Luck</th>\n","      <th>Superman Returns</th>\n","      <th>You, Me and Dupree</th>\n","      <th>The Night Listener</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Lisa Rose</th>\n","      <td>2.5</td>\n","      <td>3.5</td>\n","      <td>3.0</td>\n","      <td>3.5</td>\n","      <td>2.5</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>Gene Seymour</th>\n","      <td>3.0</td>\n","      <td>3.5</td>\n","      <td>1.5</td>\n","      <td>5.0</td>\n","      <td>3.5</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>Michael Phillips</th>\n","      <td>2.5</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>3.5</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>Mick LaSalle</th>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>Jack Matthews</th>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>3.5</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>Claudia Puig</th>\n","      <td>0.0</td>\n","      <td>3.5</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>2.5</td>\n","      <td>4.5</td>\n","    </tr>\n","    <tr>\n","      <th>Toby</th>\n","      <td>0.0</td>\n","      <td>4.5</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                  Lady in the Water  ...  The Night Listener\n","Lisa Rose                       2.5  ...                 3.0\n","Gene Seymour                    3.0  ...                 3.0\n","Michael Phillips                2.5  ...                 4.0\n","Mick LaSalle                    3.0  ...                 3.0\n","Jack Matthews                   3.0  ...                 3.0\n","Claudia Puig                    0.0  ...                 4.5\n","Toby                            0.0  ...                 0.0\n","\n","[7 rows x 6 columns]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Toby critics:\n"," Lady in the Water     0.0\n","Snakes on a Plane     4.5\n","Just My Luck          0.0\n","Superman Returns      4.0\n","You, Me and Dupree    1.0\n","The Night Listener    0.0\n","Name: Toby, dtype: float64\n"]}]},{"cell_type":"markdown","metadata":{"id":"bSTzEMW3sVFS"},"source":["### 2.1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v-8CnOi94QDd","executionInfo":{"status":"ok","timestamp":1635157033864,"user_tz":-180,"elapsed":278,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"e45d7d36-5898-427b-f701-5919472b20b4"},"source":["def similar_films(person1, person2):\n","  sim_film = []\n","\n","  for film in df.loc[person1].index.tolist():\n","    if df.loc[person2][film] != 0:\n","      if film in df.loc[person2].index.tolist():\n","        sim_film.append(film)\n","\n","  return sim_film\n","\n","\n","similar_films('Claudia Puig', 'Toby')"],"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Snakes on a Plane', 'Superman Returns', 'You, Me and Dupree']"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rjtAqeEX3uHT","executionInfo":{"status":"ok","timestamp":1635157045031,"user_tz":-180,"elapsed":286,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"c2b9c70b-b15b-4670-8ae1-2479b68b87a9"},"source":["def sim_pearson(person1, person2):\n","  sim_films = similar_films(person1, person2)\n","\n","  if len(sim_films) < 2:\n","    return 0\n","  \n","  scores1 = []\n","  scores2 = []\n","  for film in sim_films:\n","    scores1.append(df.loc[person1][film])\n","    scores2.append(df.loc[person2][film])\n","\n","  r = pearsonr(scores1, scores2)[0]\n","\n","  if isnan(r):\n","    r = 0\n","  return r\n","\n","\n","sim_pearson('Claudia Puig', 'Toby')"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8934051474415641"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":341},"id":"WZmOwprtsXf0","executionInfo":{"status":"error","timestamp":1635157465923,"user_tz":-180,"elapsed":270,"user":{"displayName":"Nikolay Fedotenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhPGaQI6m6d9SuKFoW5y_zehZfJi0hx8hBQHnOq=s64","userId":"02883025830709335153"}},"outputId":"d2db50ce-f1af-4b5a-94d3-68e53f6ce440"},"source":["def get_predictions(person):\n","  totals = {}\n","  simSums = {}\n","\n","  for index, other in df.iterrows():\n","    if index == person:\n","      continue\n","    sim = sim_pearson(person, index)\n","\n","    if sim <= 0:\n","      continue\n","\n","    for item in df.loc[index]:\n","      if item not in df.loc[person] or df.loc[person][item] == 0:\n","        totals.setdefault(item,0)\n","        totals[item] = totals[item] + df.loc[other][item] * sim\n","\n","        simSums.setdefault(item,0)\n","        simSums[item] = simSums[item] + sim\n","\n","  rankings = [(total/simSums[item], item) for item, total in totals.items()]\n","\n","  rankings.sort(reverse=True)\n","  return rankings\n","\n","\n","get_predictions('Toby')"],"execution_count":76,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-76-5836698cbd24>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m \u001b[0mget_predictions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Toby'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-76-5836698cbd24>\u001b[0m in \u001b[0;36mget_predictions\u001b[0;34m(person)\u001b[0m\n\u001b[1;32m     14\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mperson\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mperson\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mtotals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mtotals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtotals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0msim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0msimSums\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    877\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    880\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1097\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1098\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1099\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1101\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1035\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1037\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1038\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1039\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1252\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1254\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1255\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1296\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1297\u001b[0m                 \u001b[0maxis_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1298\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1299\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1300\u001b[0m             \u001b[0;31m# We (temporarily) allow for some missing keys with .loc, except in\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Float64Index([2.5, 3.5, 3.0, 3.5, 2.5, 3.0], dtype='float64')] are in the [index]\""]}]},{"cell_type":"markdown","metadata":{"id":"y6idC71hsbyx"},"source":["### 2.2"]},{"cell_type":"code","metadata":{"id":"pL0DLRE2sdaN"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v_oFki5H3_vy"},"source":["После завершения контрольной работы, дайте ссылку на ноутбук в отдельном followup в своей теме на Piazza. Дайте разрешение на его просмотр.\n","\n","Не забудьте запустить код в последней ячейке для контроля времени выполнения."]},{"cell_type":"code","metadata":{"id":"HncJvMmo35Kv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635147119680,"user_tz":-180,"elapsed":316,"user":{"displayName":"Maksim Khlopotov","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjrfi2fUKbxZsEmFSi6eHxb-YT0aNnTzgBjBm83jg=s64","userId":"17573813484649782255"}},"outputId":"10695c5e-ff4d-46d6-86ad-d6233c4e59db"},"source":["current_datetime = datetime.now()\n","print(current_datetime)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-10-25 07:31:59.284593\n"]}]}]}